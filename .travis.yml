dist: trusty
sudo: required
language: python
python:
  - "3.6"
compiler:
  - gcc
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - gcc-7
      - g++-7
      - cmake

before_install:
  - sudo apt-get update

  # Link gcc-6 and g++-6 to their standard commands
  - sudo ln -s /usr/bin/gcc-7 /usr/local/bin/gcc
  - sudo ln -s /usr/bin/g++-7 /usr/local/bin/g++
  # Export CC and CXX to tell cmake which compiler to use
  - export CC=/usr/bin/gcc-7
  - export CXX=/usr/bin/g++-7
  # Check versions of gcc, g++ and cmake
  - gcc -v && g++ -v && cmake --version
  # Run your build commands next

  - pip install codecov

  # use raxml-ng from bioconda - there are compilation errors...
  - wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
  - chmod +x miniconda.sh
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda create -q -n test-environment python=$TRAVIS_PYTHON_VERSION
  - source activate test-environment
  #- pip install --force-reinstall numpy>= 1.15.4
  - conda install -c bioconda raxml-ng


#  # get newer cmake version for raxml-ng
#  # first we create a directory for the CMake binaries
#  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
#  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
#  # we use wget to fetch the cmake binaries
#  - travis_retry wget --no-check-certificate https://cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz
#  # this is optional, but useful:
#  # do a quick md5 check to ensure that the archive we downloaded did not get compromised
#  - echo "f3546812c11ce7f5d64dc132a566b749 *cmake-3.3.2-Linux-x86_64.tar.gz" > cmake_md5.txt
#  - md5sum -c cmake_md5.txt
#  # extract the binaries; the output here is quite lengthy,
#  # so we swallow it to not clutter up the travis console
#  - tar -xvf cmake-3.3.2-Linux-x86_64.tar.gz > /dev/null
#  - mv cmake-3.3.2-Linux-x86_64 cmake-install
#  # add both the top-level directory and the bin directory from the archive
#  # to the system PATH. By adding it to the front of the path we hide the
#  # preinstalled CMake with our own.
#  - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
#  # don't forget to switch back to the main build directory once you are done
#  - cd ${TRAVIS_BUILD_DIR}

#  # raxml-ng
#  - mkdir RAxML-ng
#  - cd RAxML-ng
#  - wget https://github.com/amkozlov/raxml-ng/releases/download/0.9.0/raxml-ng_v0.9.0_linux_x86_64_MPI.zip
#  - unzip raxml-ng_v0.9.0_linux_x86_64_MPI.zip
#  - sudo apt-get install flex bison libgmp3-dev
#
#  - mkdir build && cd build
#  - cmake -DUSE_MPI=ON ..
#  - make
#  - cd ..
#
#  - rm -r build
#  - mkdir build && cd build
#  - cmake ..
#  - make
#  - cd ..
#  - cd bin
#  - echo export PATH="$PATH:$(pwd)" >> ~/.bashrc
#  - cd ..
#  - cd ..


  # install blast+ version 2.9.
  #- wget ftp://ftp.ncbi.nlm.nih.gov/blast/executables/LATEST/ncbi-blast-2.9.0+-x64-linux.tar.gz
  #- wget -c ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.9.0/ncbi-blast-2.9.0+-x64-linux.tar.gz
  #- curl --retry 10 -O ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.9.0/ncbi-blast-2.9.0+-x64-linux.tar.gz
  #- wget ftp://ftp.ncbi.nlm.nih.gov/blast/executables/LATEST/ncbi-blast-2.*-x64-linux.tar.gz
  - conda install -c bioconda blast
  #- tar -xvf ncbi-blast-2.9.0+-x64-linux.tar.gz
  #- cd ncbi-blast-2.9.0+/bin/
  #- echo export PATH="$PATH:$(pwd)" >> ~/.bashrc
  #- cd ..
  #- cd ..

    #install papara
  - mkdir PaPaRa
  - cd PaPaRa
  - wget https://sco.h-its.org/exelixis/resource/download/software/papara_nt-2.5-static_x86_64.tar.gz
  - gunzip  -cd papara_nt-2.5-static_x86_64.tar.gz | (tar xvf - )
    #mv papara_static_x86_64 papara
  - echo export PATH="$PATH:$(pwd)" >> ~/.bashrc
  - cd ..

    # install EPA-NG
  - mkdir EPA-ng
  - cd EPA-ng
  - wget https://github.com/Pbdas/epa-ng/archive/master.zip
  - unzip master.zip
  - sudo apt-get install autotools-dev libtool flex bison cmake automake autoconf
  - cd epa-ng-master/
  - make
  - cd bin
  - echo export PATH="$PATH:$(pwd)" >> ~/.bashrc
  - cd ..
  - cd ..
  - cd ..

    # install gappa (for EPA)
  - mkdir gappa
  - cd gappa
  - wget https://github.com/lczech/gappa/archive/master.zip
  - unzip master.zip
  - cd gappa-master
  - make
  - cd ..
  - cd ..


    # install modeltest-ng
  - mkdir modeltest-ng
  - cd modeltest-ng
  - wget https://github.com/ddarriba/modeltest/files/3790686/modeltest-ng-0.1.6.tar.gz
  - tar -xvf modeltest-ng-0.1.6.tar.gz
  - cd modeltest-ng-0.1.6/
  - sudo apt-get install qt5-default
  - ./build.sh
  - cd ..
  - cd ..


install:
  # install requirements
  - pip install --quiet -r requirements.txt
  - pip install --quiet .
  - pip install pytest-cov
  - pip install pytest-xdist


# command to run tests
script:
  - wget 'https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump.tar.gz'
  - gunzip  -cd taxdump.tar.gz | (tar xvf - names.dmp nodes.dmp)
  - mv *.dmp ./data/
  - mkdir tests/output
  - mkdir tests/output/test_runs
  - cp data/data_for_tests/* tests/output/test_runs/
  - pytest --cov tests/test_*
#  - pytest tests/test_add_unpublished.py
#  - pytest tests/test_ignore_acc.py
#  - pytest tests/test_filter_length.py
#  - pytest tests/test_filter_otu.py
#  - pytest tests/test_filter_seqident.py
#  - pytest tests/test_filter_thresh.py
#  - pytest tests/test_filter_unique.py
#  - pytest tests/test_mrca.py
#  - pytest tests/test_reconcile.py
#  - pytest tests/test_run_blast_query.py

after_success:
  - curl -s https://codecov.io/bash | bash
